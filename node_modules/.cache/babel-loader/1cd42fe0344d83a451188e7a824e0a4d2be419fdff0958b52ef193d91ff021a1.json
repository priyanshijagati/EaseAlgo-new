{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\src\\\\mcq.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./mcq.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MCQ = () => {\n  _s();\n  // Define the question and options\n  const question = \"An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\";\n  const options = [\"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\", \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\", \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\", \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\"];\n\n  // Correct answer is the second option (index 1)\n  const correctAnswer = options[3];\n\n  // State to store the selected answer and whether it's correct or not\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);\n\n  // Handle option selection\n  const handleOptionClick = option => {\n    setSelectedOption(option);\n    if (option === correctAnswer) {\n      setIsAnswerCorrect(true);\n    } else {\n      setIsAnswerCorrect(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mcq-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `option ${selectedOption === option ? \"selected\" : \"\"}`,\n        onClick: () => handleOptionClick(option),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), selectedOption === option && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `feedback ${isAnswerCorrect ? \"correct\" : \"incorrect\"}`,\n          children: isAnswerCorrect ? \"Correct!\" : \"Incorrect, try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(MCQ, \"aUCW7R7RQkwyo8Yh3+TXoQHEqTc=\");\n_c = MCQ;\nexport default MCQ;\nvar _c;\n$RefreshReg$(_c, \"MCQ\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MCQ","_s","question","options","correctAnswer","selectedOption","setSelectedOption","isAnswerCorrect","setIsAnswerCorrect","handleOptionClick","option","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["C:/project/src/mcq.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./mcq.css\";\r\n\r\nconst MCQ = () => {\r\n  // Define the question and options\r\n  const question = \"An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\";\r\n\r\n  const options = [\r\n    \"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\",\r\n    \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n    \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\",\r\n    \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n  ];\r\n\r\n  // Correct answer is the second option (index 1)\r\n  const correctAnswer = options[3];\r\n\r\n  // State to store the selected answer and whether it's correct or not\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);\r\n\r\n  // Handle option selection\r\n  const handleOptionClick = (option) => {\r\n    setSelectedOption(option);\r\n    if (option === correctAnswer) {\r\n      setIsAnswerCorrect(true);\r\n    } else {\r\n      setIsAnswerCorrect(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mcq-container\">\r\n      <div className=\"question\">\r\n        <p>{question}</p>\r\n      </div>\r\n\r\n      <div className=\"options\">\r\n        {options.map((option, index) => (\r\n          <div\r\n            key={index}\r\n            className={`option ${selectedOption === option ? \"selected\" : \"\"}`}\r\n            onClick={() => handleOptionClick(option)}\r\n          >\r\n            <p>{option}</p>\r\n            {selectedOption === option && (\r\n              <div className={`feedback ${isAnswerCorrect ? \"correct\" : \"incorrect\"}`}>\r\n                {isAnswerCorrect ? \"Correct!\" : \"Incorrect, try again!\"}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCQ;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAMC,QAAQ,GAAG,yUAAyU;EAE1V,MAAMC,OAAO,GAAG,CACd,sDAAsD,EACtD,kEAAkE,EAClE,0DAA0D,EAC1D,kEAAkE,CACnE;;EAED;EACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,CAAC,CAAC;;EAEhC;EACA,MAAM,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACA,MAAMY,iBAAiB,GAAIC,MAAM,IAAK;IACpCJ,iBAAiB,CAACI,MAAM,CAAC;IACzB,IAAIA,MAAM,KAAKN,aAAa,EAAE;MAC5BI,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,MAAM;MACLA,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC;EAED,oBACET,OAAA;IAAKY,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5Bb,OAAA;MAAKY,SAAS,EAAC,UAAU;MAAAC,QAAA,eACvBb,OAAA;QAAAa,QAAA,EAAIV;MAAQ;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC,eAENjB,OAAA;MAAKY,SAAS,EAAC,SAAS;MAAAC,QAAA,EACrBT,OAAO,CAACc,GAAG,CAAC,CAACP,MAAM,EAAEQ,KAAK,kBACzBnB,OAAA;QAEEY,SAAS,EAAE,UAAUN,cAAc,KAAKK,MAAM,GAAG,UAAU,GAAG,EAAE,EAAG;QACnES,OAAO,EAAEA,CAAA,KAAMV,iBAAiB,CAACC,MAAM,CAAE;QAAAE,QAAA,gBAEzCb,OAAA;UAAAa,QAAA,EAAIF;QAAM;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACdX,cAAc,KAAKK,MAAM,iBACxBX,OAAA;UAAKY,SAAS,EAAE,YAAYJ,eAAe,GAAG,SAAS,GAAG,WAAW,EAAG;UAAAK,QAAA,EACrEL,eAAe,GAAG,UAAU,GAAG;QAAuB;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpD,CACN;MAAA,GATIE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACf,EAAA,CApDID,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAsDT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}