{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\src\\\\mcq.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./mcq.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MCQ = () => {\n  _s();\n  const questionsPerPage = 2; // Number of questions per page\n  const [currentPage, setCurrentPage] = useState(1);\n  const questions = [{\n    question: \"1. An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\",\n    options: [\"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\", \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\n    // Correct\n    \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\", \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\"],\n    correctAnswer: \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\"\n  }, {\n    question: \"2. What is the time complexity of binary search in a sorted array?\",\n    options: [\"O(n)\", \"O(log n)\", \"O(n^2)\", \"O(1)\"],\n    correctAnswer: \"O(log n)\"\n  }, {\n    question: \"3. Which data structure is used in a Breadth-First Search (BFS) traversal?\",\n    options: [\"Stack\", \"Queue\", \"Priority Queue\", \"Linked List\"],\n    correctAnswer: \"Queue\"\n  }, {\n    question: \"4. A frame buffer array is addressed in row major order for a monitor with pixel locations starting from (0,0) and ending with (100,100). What is address of the pixel(6,10)? Assume one bit storage per pixel and starting pixel location is at 0. \",\n    options: [\"1016\", \"1006\", \"610\", \"616\"],\n    correctAnswer: \"1016\"\n  }];\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const handleOptionClick = (currentQuestion, option) => {\n    const isAnswerCorrect = option === currentQuestion.correctAnswer;\n    setAnsweredQuestions(prev => [...prev.filter(q => q.question !== currentQuestion.question), {\n      question: currentQuestion.question,\n      selectedOption: option,\n      isAnswerCorrect\n    }]);\n  };\n  const startIndex = (currentPage - 1) * questionsPerPage;\n  const paginatedQuestions = questions.slice(startIndex, startIndex + questionsPerPage);\n  const handleNext = () => {\n    if (currentPage * questionsPerPage < questions.length) {\n      setCurrentPage(prevPage => prevPage + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"mcq-header\",\n      id: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Test Your Knowledge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Answer the following questions to challenge your skills!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mcq-container\",\n      children: [paginatedQuestions.map((currentQuestion, questionIndex) => {\n        const answered = answeredQuestions.find(answer => answer.question === currentQuestion.question);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"question-text\",\n            children: currentQuestion.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options-container\",\n            children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `option-btn ${(answered === null || answered === void 0 ? void 0 : answered.selectedOption) === option ? answered.isAnswerCorrect ? \"correct\" : \"incorrect\" : \"\"}`,\n              onClick: () => handleOptionClick(currentQuestion, option),\n              children: [String.fromCharCode(65 + index), \". \", option]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), (answered === null || answered === void 0 ? void 0 : answered.selectedOption) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: `feedback-message ${answered.isAnswerCorrect ? \"correct-feedback\" : \"incorrect-feedback\"}`,\n            children: answered.isAnswerCorrect ? \"Correct! 🎉\" : \"Oops! Try again. ❌\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, questionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-btn\",\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MCQ, \"8M77tdoj3Q0as2mukrqF6oShyEQ=\");\n_c = MCQ;\nexport default MCQ;\nvar _c;\n$RefreshReg$(_c, \"MCQ\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MCQ","_s","questionsPerPage","currentPage","setCurrentPage","questions","question","options","correctAnswer","answeredQuestions","setAnsweredQuestions","handleOptionClick","currentQuestion","option","isAnswerCorrect","prev","filter","q","selectedOption","startIndex","paginatedQuestions","slice","handleNext","length","prevPage","children","className","id","fileName","_jsxFileName","lineNumber","columnNumber","map","questionIndex","answered","find","answer","index","onClick","String","fromCharCode","_c","$RefreshReg$"],"sources":["C:/project/src/mcq.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./mcq.css\";\r\n\r\nconst MCQ = () => {\r\n  const questionsPerPage = 2; // Number of questions per page\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const questions = [\r\n    {\r\n      question: \"1. An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\",\r\n      options: [\r\n        \"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\",\r\n        \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\", // Correct\r\n        \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\",\r\n        \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n      ],\r\n      correctAnswer:\r\n        \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n    },\r\n    {\r\n      question: \"2. What is the time complexity of binary search in a sorted array?\",\r\n      options: [\"O(n)\", \"O(log n)\", \"O(n^2)\", \"O(1)\"],\r\n      correctAnswer: \"O(log n)\",\r\n    },\r\n    {\r\n      question: \"3. Which data structure is used in a Breadth-First Search (BFS) traversal?\",\r\n      options: [\"Stack\", \"Queue\", \"Priority Queue\", \"Linked List\"],\r\n      correctAnswer: \"Queue\",\r\n    },\r\n    {\r\n      question: \"4. A frame buffer array is addressed in row major order for a monitor with pixel locations starting from (0,0) and ending with (100,100). What is address of the pixel(6,10)? Assume one bit storage per pixel and starting pixel location is at 0. \",\r\n      options: [\"1016\", \"1006\", \"610\", \"616\"],\r\n      correctAnswer: \"1016\",\r\n    },\r\n  ];\r\n\r\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\r\n\r\n  const handleOptionClick = (currentQuestion, option) => {\r\n    const isAnswerCorrect = option === currentQuestion.correctAnswer;\r\n    setAnsweredQuestions((prev) => [\r\n      ...prev.filter((q) => q.question !== currentQuestion.question),\r\n      { question: currentQuestion.question, selectedOption: option, isAnswerCorrect },\r\n    ]);\r\n  };\r\n\r\n  const startIndex = (currentPage - 1) * questionsPerPage;\r\n  const paginatedQuestions = questions.slice(startIndex, startIndex + questionsPerPage);\r\n\r\n  const handleNext = () => {\r\n    if (currentPage * questionsPerPage < questions.length) {\r\n      setCurrentPage((prevPage) => prevPage + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"mcq-header\" id=\"home\">\r\n        <h1>Test Your Knowledge</h1>\r\n        <p>Answer the following questions to challenge your skills!</p>\r\n      </header>\r\n\r\n      {/* Questions */}\r\n      <div className=\"mcq-container\">\r\n        {paginatedQuestions.map((currentQuestion, questionIndex) => {\r\n          const answered = answeredQuestions.find(\r\n            (answer) => answer.question === currentQuestion.question\r\n          );\r\n\r\n          return (\r\n            <div key={questionIndex} className=\"question-card\">\r\n              <h3 className=\"question-text\">{currentQuestion.question}</h3>\r\n              <div className=\"options-container\">\r\n                {currentQuestion.options.map((option, index) => (\r\n                  <button\r\n                    key={index}\r\n                    className={`option-btn ${\r\n                      answered?.selectedOption === option\r\n                        ? answered.isAnswerCorrect\r\n                          ? \"correct\"\r\n                          : \"incorrect\"\r\n                        : \"\"\r\n                    }`}\r\n                    onClick={() => handleOptionClick(currentQuestion, option)}\r\n                  >\r\n                    {String.fromCharCode(65 + index)}. {option}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n              {answered?.selectedOption && (\r\n                <p\r\n                  className={`feedback-message ${\r\n                    answered.isAnswerCorrect ? \"correct-feedback\" : \"incorrect-feedback\"\r\n                  }`}\r\n                >\r\n                  {answered.isAnswerCorrect ? \"Correct! 🎉\" : \"Oops! Try again. ❌\"}\r\n                </p>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n        <button className=\"next-btn\" onClick={handleNext}>\r\n          Next\r\n        </button>\r\n      </div>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default MCQ;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}