{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\src\\\\mcq.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./mcq.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MCQ = () => {\n  _s();\n  const questions = [{\n    question: \"1. An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\",\n    options: [\"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\", \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\n    // Correct\n    \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\", \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\"],\n    correctAnswer: \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\"\n  }, {\n    question: \"2. What is the time complexity of binary search in a sorted array?\",\n    options: [\"O(n)\", \"O(log n)\", \"O(n^2)\", \"O(1)\"],\n    correctAnswer: \"O(log n)\"\n  }, {\n    question: \"3. Which data structure is used in a Breadth-First Search (BFS) traversal?\",\n    options: [\"Stack\", \"Queue\", \"Priority Queue\", \"Linked List\"],\n    correctAnswer: \"Queue\"\n  }, {\n    question: \"4. A frame buffer array is addressed in row major order for a monitor with pixel locations starting from (0,0) and ending with (100,100). What is address of the pixel(6,10)? Assume one bit storage per pixel and starting pixel location is at 0.\",\n    options: [\"1016\", \"1006\", \"610\", \"616\"],\n    correctAnswer: \"1016\"\n  }, {\n    question: \"5. A program P reads in 500 integers in the range [0,100] representing the scores of 500 students. It then prints the frequency of each score above 50. What would be the best way for P to store the frequencies?\",\n    options: [\"An array of 500 numbers;\", \"An array of 100 numbers\", \"An array of 50 numbers;\", \"A dynamically allocated array of 550 numbers;\"],\n    correctAnswer: \"An array of 50 numbers;\"\n  }];\n  const tips = [\"Always start with easy questions to boost confidence.\", \"Use the elimination method for multiple-choice questions.\", \"Revise important formulas before attempting a test.\", \"Practice time management by setting a timer during mock tests.\", \"Focus on accuracy as GATE has negative marking.\"];\n  const [currentTipIndex, setCurrentTipIndex] = useState(0);\n  const handleNextTip = () => {\n    setCurrentTipIndex(prevIndex => (prevIndex + 1) % tips.length);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mcq-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mcq-container\",\n      children: questions.map((currentQuestion, questionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"question-text\",\n          children: currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"option-btn\",\n            children: [String.fromCharCode(65 + index), \". \", option]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, questionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tips-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Preparation Tip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: tips[currentTipIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-tip-btn\",\n        onClick: handleNextTip,\n        children: \"Next Tip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(MCQ, \"2SMtbbtTDIIzo0sQaykqYNB6lWc=\");\n_c = MCQ;\nexport default MCQ;\nvar _c;\n$RefreshReg$(_c, \"MCQ\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MCQ","_s","questions","question","options","correctAnswer","tips","currentTipIndex","setCurrentTipIndex","handleNextTip","prevIndex","length","className","children","map","currentQuestion","questionIndex","fileName","_jsxFileName","lineNumber","columnNumber","option","index","String","fromCharCode","onClick","_c","$RefreshReg$"],"sources":["C:/project/src/mcq.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./mcq.css\";\r\n\r\nconst MCQ = () => {\r\n  const questions = [\r\n    {\r\n      question: \"1. An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\",\r\n      options: [\r\n        \"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\",\r\n        \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\", // Correct\r\n        \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\",\r\n        \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n      ],\r\n      correctAnswer:\r\n        \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n    },\r\n    {\r\n      question: \"2. What is the time complexity of binary search in a sorted array?\",\r\n      options: [\"O(n)\", \"O(log n)\", \"O(n^2)\", \"O(1)\"],\r\n      correctAnswer: \"O(log n)\",\r\n    },\r\n    {\r\n      question: \"3. Which data structure is used in a Breadth-First Search (BFS) traversal?\",\r\n      options: [\"Stack\", \"Queue\", \"Priority Queue\", \"Linked List\"],\r\n      correctAnswer: \"Queue\",\r\n    },\r\n    {\r\n      question: \"4. A frame buffer array is addressed in row major order for a monitor with pixel locations starting from (0,0) and ending with (100,100). What is address of the pixel(6,10)? Assume one bit storage per pixel and starting pixel location is at 0.\",\r\n      options: [\"1016\", \"1006\", \"610\", \"616\"],\r\n      correctAnswer: \"1016\",\r\n    },\r\n    {\r\n      question: \"5. A program P reads in 500 integers in the range [0,100] representing the scores of 500 students. It then prints the frequency of each score above 50. What would be the best way for P to store the frequencies?\",\r\n      options: [\r\n        \"An array of 500 numbers;\",\r\n        \"An array of 100 numbers\",\r\n        \"An array of 50 numbers;\",\r\n        \"A dynamically allocated array of 550 numbers;\",\r\n      ],\r\n      correctAnswer: \"An array of 50 numbers;\",\r\n    },\r\n  ];\r\n\r\n  const tips = [\r\n    \"Always start with easy questions to boost confidence.\",\r\n    \"Use the elimination method for multiple-choice questions.\",\r\n    \"Revise important formulas before attempting a test.\",\r\n    \"Practice time management by setting a timer during mock tests.\",\r\n    \"Focus on accuracy as GATE has negative marking.\",\r\n  ];\r\n\r\n  const [currentTipIndex, setCurrentTipIndex] = useState(0);\r\n\r\n  const handleNextTip = () => {\r\n    setCurrentTipIndex((prevIndex) => (prevIndex + 1) % tips.length);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mcq-wrapper\">\r\n      <div className=\"mcq-container\">\r\n        {questions.map((currentQuestion, questionIndex) => (\r\n          <div key={questionIndex} className=\"question-card\">\r\n            <h3 className=\"question-text\">{currentQuestion.question}</h3>\r\n            <div className=\"options-container\">\r\n              {currentQuestion.options.map((option, index) => (\r\n                <button key={index} className=\"option-btn\">\r\n                  {String.fromCharCode(65 + index)}. {option}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"tips-panel\">\r\n        <h2>Preparation Tip</h2>\r\n        <p>{tips[currentTipIndex]}</p>\r\n        <button className=\"next-tip-btn\" onClick={handleNextTip}>\r\n          Next Tip\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCQ;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}