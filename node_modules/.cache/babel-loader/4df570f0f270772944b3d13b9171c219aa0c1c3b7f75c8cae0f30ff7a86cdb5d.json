{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\src\\\\mcq.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./mcq.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MCQ = () => {\n  _s();\n  // Define the questions, options, and correct answers\n  const questions = [{\n    question: \"An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\",\n    options: [\"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\", \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\n    // Correct\n    \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\", \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\"],\n    correctAnswer: \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\"\n  }, {\n    question: \"What is the time complexity of binary search in a sorted array?\",\n    options: [\"O(n)\", \"O(log n)\", \"O(n^2)\", \"O(1)\"],\n    correctAnswer: \"O(log n)\"\n  }, {\n    question: \"Which data structure is used in a Breadth-First Search (BFS) traversal?\",\n    options: [\"Stack\", \"Queue\", \"Priority Queue\", \"Linked List\"],\n    correctAnswer: \"Queue\"\n  }];\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n\n  // Handle option selection\n  const handleOptionClick = (currentQuestion, option) => {\n    const isAnswerCorrect = option === currentQuestion.correctAnswer;\n    setAnsweredQuestions(prev => [...prev.filter(q => q.question !== currentQuestion.question),\n    // Remove previous answer for this question\n    {\n      question: currentQuestion.question,\n      selectedOption: option,\n      isAnswerCorrect\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mcq-container\",\n      children: questions.map((currentQuestion, questionIndex) => {\n        const answered = answeredQuestions.find(answer => answer.question === currentQuestion.question);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: currentQuestion.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `option ${(answered === null || answered === void 0 ? void 0 : answered.selectedOption) === option ? answered.isAnswerCorrect ? \"correct\" : \"incorrect\" : \"\"}`,\n              onClick: () => handleOptionClick(currentQuestion, option),\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: option\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 21\n              }, this), (answered === null || answered === void 0 ? void 0 : answered.selectedOption) === option && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"feedback\",\n                children: answered.isAnswerCorrect ? \"✅ Correct!\" : \"❌ Incorrect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, questionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(MCQ, \"23mUxtQzA8VcPMbyWGVDvoQtf8U=\");\n_c = MCQ;\nexport default MCQ;\nvar _c;\n$RefreshReg$(_c, \"MCQ\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MCQ","_s","questions","question","options","correctAnswer","answeredQuestions","setAnsweredQuestions","handleOptionClick","currentQuestion","option","isAnswerCorrect","prev","filter","q","selectedOption","children","className","map","questionIndex","answered","find","answer","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","_c","$RefreshReg$"],"sources":["C:/project/src/mcq.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./mcq.css\";\r\n\r\nconst MCQ = () => {\r\n  // Define the questions, options, and correct answers\r\n  const questions = [\r\n    {\r\n      question:\r\n        \"An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\",\r\n      options: [\r\n        \"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\",\r\n        \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\", // Correct\r\n        \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\",\r\n        \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n      ],\r\n      correctAnswer:\r\n        \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n    },\r\n    {\r\n      question: \"What is the time complexity of binary search in a sorted array?\",\r\n      options: [\"O(n)\", \"O(log n)\", \"O(n^2)\", \"O(1)\"],\r\n      correctAnswer: \"O(log n)\",\r\n    },\r\n    {\r\n      question:\r\n        \"Which data structure is used in a Breadth-First Search (BFS) traversal?\",\r\n      options: [\"Stack\", \"Queue\", \"Priority Queue\", \"Linked List\"],\r\n      correctAnswer: \"Queue\",\r\n    },\r\n  ];\r\n\r\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\r\n\r\n  // Handle option selection\r\n  const handleOptionClick = (currentQuestion, option) => {\r\n    const isAnswerCorrect = option === currentQuestion.correctAnswer;\r\n\r\n    setAnsweredQuestions((prev) => [\r\n      ...prev.filter((q) => q.question !== currentQuestion.question), // Remove previous answer for this question\r\n      { question: currentQuestion.question, selectedOption: option, isAnswerCorrect },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    \r\n      {/* MCQ Questions */}\r\n      <div className=\"mcq-container\">\r\n        {questions.map((currentQuestion, questionIndex) => {\r\n          const answered = answeredQuestions.find(\r\n            (answer) => answer.question === currentQuestion.question\r\n          );\r\n\r\n          return (\r\n            <div key={questionIndex} className=\"question\">\r\n              <p>{currentQuestion.question}</p>\r\n              <div className=\"options\">\r\n                {currentQuestion.options.map((option, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className={`option ${\r\n                      answered?.selectedOption === option\r\n                        ? answered.isAnswerCorrect\r\n                          ? \"correct\"\r\n                          : \"incorrect\"\r\n                        : \"\"\r\n                    }`}\r\n                    onClick={() => handleOptionClick(currentQuestion, option)}\r\n                  >\r\n                    <p>{option}</p>\r\n                    {answered?.selectedOption === option && (\r\n                      <div className=\"feedback\">\r\n                        {answered.isAnswerCorrect ? \"✅ Correct!\" : \"❌ Incorrect\"}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCQ;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}