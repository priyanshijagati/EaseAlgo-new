{"ast":null,"code":"import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, mix, randomInRange, setRangeValue } from \"./NumberUtils.js\";\nimport { isArray, isString } from \"./TypeUtils.js\";\nimport { millisecondsToSeconds, percentDenominator } from \"../Core/Utils/Constants.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { itemFromArray } from \"./Utils.js\";\nconst randomColorValue = \"random\",\n  midColorValue = \"mid\";\nfunction stringToRgba(engine, input) {\n  if (!input) {\n    return;\n  }\n  for (const manager of engine.colorManagers.values()) {\n    if (input.startsWith(manager.stringPrefix)) {\n      return manager.parseString(input);\n    }\n  }\n}\nexport function rangeColorToRgb(engine, input, index, useIndex = true) {\n  if (!input) {\n    return;\n  }\n  const color = isString(input) ? {\n    value: input\n  } : input;\n  if (isString(color.value)) {\n    return colorToRgb(engine, color.value, index, useIndex);\n  }\n  if (isArray(color.value)) {\n    return rangeColorToRgb(engine, {\n      value: itemFromArray(color.value, index, useIndex)\n    });\n  }\n  for (const manager of engine.colorManagers.values()) {\n    const res = manager.handleRangeColor(color);\n    if (res) {\n      return res;\n    }\n  }\n}\nexport function colorToRgb(engine, input, index, useIndex = true) {\n  if (!input) {\n    return;\n  }\n  const color = isString(input) ? {\n    value: input\n  } : input;\n  if (isString(color.value)) {\n    return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(engine, color.value);\n  }\n  if (isArray(color.value)) {\n    return colorToRgb(engine, {\n      value: itemFromArray(color.value, index, useIndex)\n    });\n  }\n  for (const manager of engine.colorManagers.values()) {\n    const res = manager.handleColor(color);\n    if (res) {\n      return res;\n    }\n  }\n}\nexport function colorToHsl(engine, color, index, useIndex = true) {\n  const rgb = colorToRgb(engine, color, index, useIndex);\n  return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(engine, color, index, useIndex = true) {\n  const rgb = rangeColorToRgb(engine, color, index, useIndex);\n  return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n  const rgbMax = 255,\n    hMax = 360,\n    sMax = 100,\n    lMax = 100,\n    hMin = 0,\n    sMin = 0,\n    hPhase = 60,\n    half = 0.5,\n    double = 2,\n    r1 = color.r / rgbMax,\n    g1 = color.g / rgbMax,\n    b1 = color.b / rgbMax,\n    max = Math.max(r1, g1, b1),\n    min = Math.min(r1, g1, b1),\n    res = {\n      h: hMin,\n      l: (max + min) * half,\n      s: sMin\n    };\n  if (max !== min) {\n    res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n    res.h = r1 === max ? (g1 - b1) / (max - min) : res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min);\n  }\n  res.l *= lMax;\n  res.s *= sMax;\n  res.h *= hPhase;\n  if (res.h < hMin) {\n    res.h += hMax;\n  }\n  if (res.h >= hMax) {\n    res.h -= hMax;\n  }\n  return res;\n}\nexport function stringToAlpha(engine, input) {\n  return stringToRgba(engine, input)?.a;\n}\nexport function stringToRgb(engine, input) {\n  return stringToRgba(engine, input);\n}\nexport function hslToRgb(hsl) {\n  const hMax = 360,\n    sMax = 100,\n    lMax = 100,\n    sMin = 0,\n    lMin = 0,\n    h = (hsl.h % hMax + hMax) % hMax,\n    s = Math.max(sMin, Math.min(sMax, hsl.s)),\n    l = Math.max(lMin, Math.min(lMax, hsl.l)),\n    hNormalized = h / hMax,\n    sNormalized = s / sMax,\n    lNormalized = l / lMax,\n    rgbFactor = 255,\n    triple = 3;\n  if (s === sMin) {\n    const grayscaleValue = Math.round(lNormalized * rgbFactor);\n    return {\n      r: grayscaleValue,\n      g: grayscaleValue,\n      b: grayscaleValue\n    };\n  }\n  const half = 0.5,\n    double = 2,\n    channel = (temp1, temp2, temp3) => {\n      const temp3Min = 0,\n        temp3Max = 1,\n        sextuple = 6;\n      if (temp3 < temp3Min) {\n        temp3++;\n      }\n      if (temp3 > temp3Max) {\n        temp3--;\n      }\n      if (temp3 * sextuple < temp3Max) {\n        return temp1 + (temp2 - temp1) * sextuple * temp3;\n      }\n      if (temp3 * double < temp3Max) {\n        return temp2;\n      }\n      if (temp3 * triple < temp3Max * double) {\n        const temp3Offset = double / triple;\n        return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n      }\n      return temp1;\n    },\n    sNormalizedOffset = 1,\n    temp1 = lNormalized < half ? lNormalized * (sNormalizedOffset + sNormalized) : lNormalized + sNormalized - lNormalized * sNormalized,\n    temp2 = double * lNormalized - temp1,\n    phaseNumerator = 1,\n    phaseThird = phaseNumerator / triple,\n    red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)),\n    green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)),\n    blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n  return {\n    r: Math.round(red),\n    g: Math.round(green),\n    b: Math.round(blue)\n  };\n}\nexport function hslaToRgba(hsla) {\n  const rgbResult = hslToRgb(hsla);\n  return {\n    a: hsla.a,\n    b: rgbResult.b,\n    g: rgbResult.g,\n    r: rgbResult.r\n  };\n}\nexport function getRandomRgbColor(min) {\n  const defaultMin = 0,\n    fixedMin = min ?? defaultMin,\n    rgbMax = 256;\n  return {\n    b: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n    g: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n    r: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax)))\n  };\n}\nexport function getStyleFromRgb(color, opacity) {\n  const defaultOpacity = 1;\n  return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? defaultOpacity})`;\n}\nexport function getStyleFromHsl(color, opacity) {\n  const defaultOpacity = 1;\n  return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? defaultOpacity})`;\n}\nexport function colorMix(color1, color2, size1, size2) {\n  let rgb1 = color1,\n    rgb2 = color2;\n  if (rgb1.r === undefined) {\n    rgb1 = hslToRgb(color1);\n  }\n  if (rgb2.r === undefined) {\n    rgb2 = hslToRgb(color2);\n  }\n  return {\n    b: mix(rgb1.b, rgb2.b, size1, size2),\n    g: mix(rgb1.g, rgb2.g, size1, size2),\n    r: mix(rgb1.r, rgb2.r, size1, size2)\n  };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n  if (linkColor === randomColorValue) {\n    return getRandomRgbColor();\n  } else if (linkColor === midColorValue) {\n    const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(),\n      destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n    if (sourceColor && destColor && p2) {\n      return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n    } else {\n      const hslColor = sourceColor ?? destColor;\n      if (hslColor) {\n        return hslToRgb(hslColor);\n      }\n    }\n  } else {\n    return linkColor;\n  }\n}\nexport function getLinkRandomColor(engine, optColor, blink, consent) {\n  const color = isString(optColor) ? optColor : optColor.value;\n  if (color === randomColorValue) {\n    if (consent) {\n      return rangeColorToRgb(engine, {\n        value: color\n      });\n    }\n    if (blink) {\n      return randomColorValue;\n    }\n    return midColorValue;\n  } else if (color === midColorValue) {\n    return midColorValue;\n  } else {\n    return rangeColorToRgb(engine, {\n      value: color\n    });\n  }\n}\nexport function getHslFromAnimation(animation) {\n  return animation !== undefined ? {\n    h: animation.h.value,\n    s: animation.s.value,\n    l: animation.l.value\n  } : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n  const resColor = {\n    h: {\n      enable: false,\n      value: hsl.h\n    },\n    s: {\n      enable: false,\n      value: hsl.s\n    },\n    l: {\n      enable: false,\n      value: hsl.l\n    }\n  };\n  if (animationOptions) {\n    setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n    setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n    setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n  }\n  return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n  colorValue.enable = colorAnimation.enable;\n  const defaultVelocity = 0,\n    decayOffset = 1,\n    defaultLoops = 0,\n    defaultTime = 0;\n  if (colorValue.enable) {\n    colorValue.velocity = getRangeValue(colorAnimation.speed) / percentDenominator * reduceFactor;\n    colorValue.decay = decayOffset - getRangeValue(colorAnimation.decay);\n    colorValue.status = AnimationStatus.increasing;\n    colorValue.loops = defaultLoops;\n    colorValue.maxLoops = getRangeValue(colorAnimation.count);\n    colorValue.time = defaultTime;\n    colorValue.delayTime = getRangeValue(colorAnimation.delay) * millisecondsToSeconds;\n    if (!colorAnimation.sync) {\n      colorValue.velocity *= getRandom();\n      colorValue.value *= getRandom();\n    }\n    colorValue.initialValue = colorValue.value;\n    colorValue.offset = setRangeValue(colorAnimation.offset);\n  } else {\n    colorValue.velocity = defaultVelocity;\n  }\n}\nexport function updateColorValue(data, range, decrease, delta) {\n  const minLoops = 0,\n    minDelay = 0,\n    identity = 1,\n    minVelocity = 0,\n    minOffset = 0,\n    velocityFactor = 3.6;\n  if (!data || !data.enable || (data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops)) {\n    return;\n  }\n  if (!data.time) {\n    data.time = 0;\n  }\n  if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n    data.time += delta.value;\n  }\n  if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n    return;\n  }\n  const offset = data.offset ? randomInRange(data.offset) : minOffset,\n    velocity = (data.velocity ?? minVelocity) * delta.factor + offset * velocityFactor,\n    decay = data.decay ?? identity,\n    max = getRangeMax(range),\n    min = getRangeMin(range);\n  if (!decrease || data.status === AnimationStatus.increasing) {\n    data.value += velocity;\n    if (data.value > max) {\n      if (!data.loops) {\n        data.loops = 0;\n      }\n      data.loops++;\n      if (decrease) {\n        data.status = AnimationStatus.decreasing;\n      } else {\n        data.value -= max;\n      }\n    }\n  } else {\n    data.value -= velocity;\n    const minValue = 0;\n    if (data.value < minValue) {\n      if (!data.loops) {\n        data.loops = 0;\n      }\n      data.loops++;\n      data.status = AnimationStatus.increasing;\n    }\n  }\n  if (data.velocity && decay !== identity) {\n    data.velocity *= decay;\n  }\n  data.value = clamp(data.value, min, max);\n}\nexport function updateColor(color, delta) {\n  if (!color) {\n    return;\n  }\n  const {\n    h,\n    s,\n    l\n  } = color;\n  const ranges = {\n    h: {\n      min: 0,\n      max: 360\n    },\n    s: {\n      min: 0,\n      max: 100\n    },\n    l: {\n      min: 0,\n      max: 100\n    }\n  };\n  if (h) {\n    updateColorValue(h, ranges.h, false, delta);\n  }\n  if (s) {\n    updateColorValue(s, ranges.s, true, delta);\n  }\n  if (l) {\n    updateColorValue(l, ranges.l, true, delta);\n  }\n}","map":{"version":3,"names":["clamp","getRandom","getRangeMax","getRangeMin","getRangeValue","mix","randomInRange","setRangeValue","isArray","isString","millisecondsToSeconds","percentDenominator","AnimationStatus","itemFromArray","randomColorValue","midColorValue","stringToRgba","engine","input","manager","colorManagers","values","startsWith","stringPrefix","parseString","rangeColorToRgb","index","useIndex","color","value","colorToRgb","res","handleRangeColor","getRandomRgbColor","stringToRgb","handleColor","colorToHsl","rgb","rgbToHsl","undefined","rangeColorToHsl","rgbMax","hMax","sMax","lMax","hMin","sMin","hPhase","half","double","r1","r","g1","g","b1","b","max","Math","min","h","l","s","stringToAlpha","a","hslToRgb","hsl","lMin","hNormalized","sNormalized","lNormalized","rgbFactor","triple","grayscaleValue","round","channel","temp1","temp2","temp3","temp3Min","temp3Max","sextuple","temp3Offset","sNormalizedOffset","phaseNumerator","phaseThird","red","green","blue","hslaToRgba","hsla","rgbResult","defaultMin","fixedMin","floor","getStyleFromRgb","opacity","defaultOpacity","getStyleFromHsl","colorMix","color1","color2","size1","size2","rgb1","rgb2","getLinkColor","p1","p2","linkColor","sourceColor","getFillColor","getStrokeColor","destColor","getRadius","hslColor","getLinkRandomColor","optColor","blink","consent","getHslFromAnimation","animation","getHslAnimationFromHsl","animationOptions","reduceFactor","resColor","enable","setColorAnimation","colorValue","colorAnimation","defaultVelocity","decayOffset","defaultLoops","defaultTime","velocity","speed","decay","status","increasing","loops","maxLoops","count","time","delayTime","delay","sync","initialValue","offset","updateColorValue","data","range","decrease","delta","minLoops","minDelay","identity","minVelocity","minOffset","velocityFactor","factor","decreasing","minValue","updateColor","ranges"],"sources":["C:/project/node_modules/@tsparticles/engine/browser/Utils/ColorUtils.js"],"sourcesContent":["import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, mix, randomInRange, setRangeValue, } from \"./NumberUtils.js\";\nimport { isArray, isString } from \"./TypeUtils.js\";\nimport { millisecondsToSeconds, percentDenominator } from \"../Core/Utils/Constants.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { itemFromArray } from \"./Utils.js\";\nconst randomColorValue = \"random\", midColorValue = \"mid\";\nfunction stringToRgba(engine, input) {\n    if (!input) {\n        return;\n    }\n    for (const manager of engine.colorManagers.values()) {\n        if (input.startsWith(manager.stringPrefix)) {\n            return manager.parseString(input);\n        }\n    }\n}\nexport function rangeColorToRgb(engine, input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return colorToRgb(engine, color.value, index, useIndex);\n    }\n    if (isArray(color.value)) {\n        return rangeColorToRgb(engine, {\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const manager of engine.colorManagers.values()) {\n        const res = manager.handleRangeColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToRgb(engine, input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(engine, color.value);\n    }\n    if (isArray(color.value)) {\n        return colorToRgb(engine, {\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const manager of engine.colorManagers.values()) {\n        const res = manager.handleColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToHsl(engine, color, index, useIndex = true) {\n    const rgb = colorToRgb(engine, color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(engine, color, index, useIndex = true) {\n    const rgb = rangeColorToRgb(engine, color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n    const rgbMax = 255, hMax = 360, sMax = 100, lMax = 100, hMin = 0, sMin = 0, hPhase = 60, half = 0.5, double = 2, r1 = color.r / rgbMax, g1 = color.g / rgbMax, b1 = color.b / rgbMax, max = Math.max(r1, g1, b1), min = Math.min(r1, g1, b1), res = {\n        h: hMin,\n        l: (max + min) * half,\n        s: sMin,\n    };\n    if (max !== min) {\n        res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n        res.h =\n            r1 === max\n                ? (g1 - b1) / (max - min)\n                : (res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min));\n    }\n    res.l *= lMax;\n    res.s *= sMax;\n    res.h *= hPhase;\n    if (res.h < hMin) {\n        res.h += hMax;\n    }\n    if (res.h >= hMax) {\n        res.h -= hMax;\n    }\n    return res;\n}\nexport function stringToAlpha(engine, input) {\n    return stringToRgba(engine, input)?.a;\n}\nexport function stringToRgb(engine, input) {\n    return stringToRgba(engine, input);\n}\nexport function hslToRgb(hsl) {\n    const hMax = 360, sMax = 100, lMax = 100, sMin = 0, lMin = 0, h = ((hsl.h % hMax) + hMax) % hMax, s = Math.max(sMin, Math.min(sMax, hsl.s)), l = Math.max(lMin, Math.min(lMax, hsl.l)), hNormalized = h / hMax, sNormalized = s / sMax, lNormalized = l / lMax, rgbFactor = 255, triple = 3;\n    if (s === sMin) {\n        const grayscaleValue = Math.round(lNormalized * rgbFactor);\n        return { r: grayscaleValue, g: grayscaleValue, b: grayscaleValue };\n    }\n    const half = 0.5, double = 2, channel = (temp1, temp2, temp3) => {\n        const temp3Min = 0, temp3Max = 1, sextuple = 6;\n        if (temp3 < temp3Min) {\n            temp3++;\n        }\n        if (temp3 > temp3Max) {\n            temp3--;\n        }\n        if (temp3 * sextuple < temp3Max) {\n            return temp1 + (temp2 - temp1) * sextuple * temp3;\n        }\n        if (temp3 * double < temp3Max) {\n            return temp2;\n        }\n        if (temp3 * triple < temp3Max * double) {\n            const temp3Offset = double / triple;\n            return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n        }\n        return temp1;\n    }, sNormalizedOffset = 1, temp1 = lNormalized < half\n        ? lNormalized * (sNormalizedOffset + sNormalized)\n        : lNormalized + sNormalized - lNormalized * sNormalized, temp2 = double * lNormalized - temp1, phaseNumerator = 1, phaseThird = phaseNumerator / triple, red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)), green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)), blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n    return { r: Math.round(red), g: Math.round(green), b: Math.round(blue) };\n}\nexport function hslaToRgba(hsla) {\n    const rgbResult = hslToRgb(hsla);\n    return {\n        a: hsla.a,\n        b: rgbResult.b,\n        g: rgbResult.g,\n        r: rgbResult.r,\n    };\n}\nexport function getRandomRgbColor(min) {\n    const defaultMin = 0, fixedMin = min ?? defaultMin, rgbMax = 256;\n    return {\n        b: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n        g: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n        r: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n    };\n}\nexport function getStyleFromRgb(color, opacity) {\n    const defaultOpacity = 1;\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? defaultOpacity})`;\n}\nexport function getStyleFromHsl(color, opacity) {\n    const defaultOpacity = 1;\n    return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? defaultOpacity})`;\n}\nexport function colorMix(color1, color2, size1, size2) {\n    let rgb1 = color1, rgb2 = color2;\n    if (rgb1.r === undefined) {\n        rgb1 = hslToRgb(color1);\n    }\n    if (rgb2.r === undefined) {\n        rgb2 = hslToRgb(color2);\n    }\n    return {\n        b: mix(rgb1.b, rgb2.b, size1, size2),\n        g: mix(rgb1.g, rgb2.g, size1, size2),\n        r: mix(rgb1.r, rgb2.r, size1, size2),\n    };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n    if (linkColor === randomColorValue) {\n        return getRandomRgbColor();\n    }\n    else if (linkColor === midColorValue) {\n        const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(), destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n        if (sourceColor && destColor && p2) {\n            return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n        }\n        else {\n            const hslColor = sourceColor ?? destColor;\n            if (hslColor) {\n                return hslToRgb(hslColor);\n            }\n        }\n    }\n    else {\n        return linkColor;\n    }\n}\nexport function getLinkRandomColor(engine, optColor, blink, consent) {\n    const color = isString(optColor) ? optColor : optColor.value;\n    if (color === randomColorValue) {\n        if (consent) {\n            return rangeColorToRgb(engine, {\n                value: color,\n            });\n        }\n        if (blink) {\n            return randomColorValue;\n        }\n        return midColorValue;\n    }\n    else if (color === midColorValue) {\n        return midColorValue;\n    }\n    else {\n        return rangeColorToRgb(engine, {\n            value: color,\n        });\n    }\n}\nexport function getHslFromAnimation(animation) {\n    return animation !== undefined\n        ? {\n            h: animation.h.value,\n            s: animation.s.value,\n            l: animation.l.value,\n        }\n        : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n    const resColor = {\n        h: {\n            enable: false,\n            value: hsl.h,\n        },\n        s: {\n            enable: false,\n            value: hsl.s,\n        },\n        l: {\n            enable: false,\n            value: hsl.l,\n        },\n    };\n    if (animationOptions) {\n        setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n        setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n        setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n    }\n    return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n    colorValue.enable = colorAnimation.enable;\n    const defaultVelocity = 0, decayOffset = 1, defaultLoops = 0, defaultTime = 0;\n    if (colorValue.enable) {\n        colorValue.velocity = (getRangeValue(colorAnimation.speed) / percentDenominator) * reduceFactor;\n        colorValue.decay = decayOffset - getRangeValue(colorAnimation.decay);\n        colorValue.status = AnimationStatus.increasing;\n        colorValue.loops = defaultLoops;\n        colorValue.maxLoops = getRangeValue(colorAnimation.count);\n        colorValue.time = defaultTime;\n        colorValue.delayTime = getRangeValue(colorAnimation.delay) * millisecondsToSeconds;\n        if (!colorAnimation.sync) {\n            colorValue.velocity *= getRandom();\n            colorValue.value *= getRandom();\n        }\n        colorValue.initialValue = colorValue.value;\n        colorValue.offset = setRangeValue(colorAnimation.offset);\n    }\n    else {\n        colorValue.velocity = defaultVelocity;\n    }\n}\nexport function updateColorValue(data, range, decrease, delta) {\n    const minLoops = 0, minDelay = 0, identity = 1, minVelocity = 0, minOffset = 0, velocityFactor = 3.6;\n    if (!data ||\n        !data.enable ||\n        ((data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops))) {\n        return;\n    }\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        return;\n    }\n    const offset = data.offset ? randomInRange(data.offset) : minOffset, velocity = (data.velocity ?? minVelocity) * delta.factor + offset * velocityFactor, decay = data.decay ?? identity, max = getRangeMax(range), min = getRangeMin(range);\n    if (!decrease || data.status === AnimationStatus.increasing) {\n        data.value += velocity;\n        if (data.value > max) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            if (decrease) {\n                data.status = AnimationStatus.decreasing;\n            }\n            else {\n                data.value -= max;\n            }\n        }\n    }\n    else {\n        data.value -= velocity;\n        const minValue = 0;\n        if (data.value < minValue) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            data.status = AnimationStatus.increasing;\n        }\n    }\n    if (data.velocity && decay !== identity) {\n        data.velocity *= decay;\n    }\n    data.value = clamp(data.value, min, max);\n}\nexport function updateColor(color, delta) {\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color;\n    const ranges = {\n        h: { min: 0, max: 360 },\n        s: { min: 0, max: 100 },\n        l: { min: 0, max: 100 },\n    };\n    if (h) {\n        updateColorValue(h, ranges.h, false, delta);\n    }\n    if (s) {\n        updateColorValue(s, ranges.s, true, delta);\n    }\n    if (l) {\n        updateColorValue(l, ranges.l, true, delta);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}