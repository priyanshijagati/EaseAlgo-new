{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\src\\\\mcq.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./mcq.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MCQ = () => {\n  _s();\n  // Define the questions, options, and correct answers\n  const questions = [{\n    question: \"An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\",\n    options: [\"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\", \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\n    // Correct\n    \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\", \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\"],\n    correctAnswer: \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\"\n  }, {\n    question: \"What is the time complexity of binary search in a sorted array?\",\n    options: [\"O(n)\", \"O(log n)\", \"O(n^2)\", \"O(1)\"],\n    correctAnswer: \"O(log n)\"\n  }, {\n    question: \"Which data structure is used in a Breadth-First Search (BFS) traversal?\",\n    options: [\"Stack\", \"Queue\", \"Priority Queue\", \"Linked List\"],\n    correctAnswer: \"Queue\"\n  }];\n\n  // State to track the current question and the selected option\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);\n  const currentQuestion = questions[currentQuestionIndex];\n\n  // Handle option selection\n  const handleOptionClick = option => {\n    setSelectedOption(option);\n    if (option === currentQuestion.correctAnswer) {\n      setIsAnswerCorrect(true);\n    } else {\n      setIsAnswerCorrect(false);\n    }\n  };\n\n  // Move to the next question\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setSelectedOption(null);\n      setIsAnswerCorrect(null);\n    }\n  };\n\n  // Move to the previous question\n  const handlePreviousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n      setSelectedOption(null);\n      setIsAnswerCorrect(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mcq-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `option ${selectedOption === option ? \"selected\" : \"\"}`,\n        onClick: () => handleOptionClick(option),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: option\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), selectedOption === option && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `feedback ${isAnswerCorrect ? \"correct\" : \"incorrect\"}`,\n          children: isAnswerCorrect ? \"Correct!\" : \"Incorrect, try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePreviousQuestion,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: currentQuestionIndex === questions.length - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(MCQ, \"JyZfnFQchFVIslgBVF5I/MtB4ns=\");\n_c = MCQ;\nexport default MCQ;\nvar _c;\n$RefreshReg$(_c, \"MCQ\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MCQ","_s","questions","question","options","correctAnswer","currentQuestionIndex","setCurrentQuestionIndex","selectedOption","setSelectedOption","isAnswerCorrect","setIsAnswerCorrect","currentQuestion","handleOptionClick","option","handleNextQuestion","length","handlePreviousQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/project/src/mcq.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./mcq.css\";\r\n\r\nconst MCQ = () => {\r\n  // Define the questions, options, and correct answers\r\n  const questions = [\r\n    {\r\n      question: \"An array A consists of n integers in locations A[0], A[1], ... A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 ≤ k ≤ (n - 1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks.\",\r\n      options: [\r\n        \"i > min; j != (n + i) mod n; A[j + k] = temp; i + 1;\",\r\n        \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\", // Correct\r\n        \"i < min; j != (n + i + k) mod n; A[j + k] = temp; i + 1;\",\r\n        \"i > min; j != (n + i + k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n      ],\r\n      correctAnswer: \"i < min; j != (n + i - k) mod n; A[(j + k) mod n] = temp; i + 1;\",\r\n    },\r\n    {\r\n      question: \"What is the time complexity of binary search in a sorted array?\",\r\n      options: [\"O(n)\", \"O(log n)\", \"O(n^2)\", \"O(1)\"],\r\n      correctAnswer: \"O(log n)\",\r\n    },\r\n    {\r\n      question: \"Which data structure is used in a Breadth-First Search (BFS) traversal?\",\r\n      options: [\"Stack\", \"Queue\", \"Priority Queue\", \"Linked List\"],\r\n      correctAnswer: \"Queue\",\r\n    },\r\n  ];\r\n\r\n  // State to track the current question and the selected option\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  // Handle option selection\r\n  const handleOptionClick = (option) => {\r\n    setSelectedOption(option);\r\n    if (option === currentQuestion.correctAnswer) {\r\n      setIsAnswerCorrect(true);\r\n    } else {\r\n      setIsAnswerCorrect(false);\r\n    }\r\n  };\r\n\r\n  // Move to the next question\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      setSelectedOption(null);\r\n      setIsAnswerCorrect(null);\r\n    }\r\n  };\r\n\r\n  // Move to the previous question\r\n  const handlePreviousQuestion = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n      setSelectedOption(null);\r\n      setIsAnswerCorrect(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mcq-container\">\r\n      <div className=\"question\">\r\n        <p>{currentQuestion.question}</p>\r\n      </div>\r\n\r\n      <div className=\"options\">\r\n        {currentQuestion.options.map((option, index) => (\r\n          <div\r\n            key={index}\r\n            className={`option ${selectedOption === option ? \"selected\" : \"\"}`}\r\n            onClick={() => handleOptionClick(option)}\r\n          >\r\n            <p>{option}</p>\r\n            {selectedOption === option && (\r\n              <div className={`feedback ${isAnswerCorrect ? \"correct\" : \"incorrect\"}`}>\r\n                {isAnswerCorrect ? \"Correct!\" : \"Incorrect, try again!\"}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"navigation-buttons\">\r\n        <button onClick={handlePreviousQuestion} disabled={currentQuestionIndex === 0}>\r\n          Previous\r\n        </button>\r\n        <button onClick={handleNextQuestion} disabled={currentQuestionIndex === questions.length - 1}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCQ;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}